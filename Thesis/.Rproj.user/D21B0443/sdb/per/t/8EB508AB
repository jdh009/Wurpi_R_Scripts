{
    "contents" : "####################################### Metadata #######################################\n###\n### Developed by: Jeroen Roelofs\n### Thesis, Wageningen University\n###\n###################################### Main script ######################################\n###\n### --------------------------------- Aquire and load libraries ------------------------\n###\n### Install packages if required.\n# if (!require(xlsReadWrite)) install.packages('xlsReadWrite')\nif (!require(gdata)) install.packages('gdata')\nif (!require(timeDate)) install.packages('timeDate')\nif (!require(timeSeries)) install.packages('timeSeries')\n\n### Access package libraries\n# library (xlsReadWrite)\nlibrary(gdata)\nlibrary(timeSeries)\nlibrary(timeDate)\n\n### Set working directory\nsetwd(\"E:/WUR/Thesis/R/Wurpi_R_Scripts/Thesis\")\n\n###------------------------------------- Set variables -----------------------------------\n### Set variables by user\nISset <- list(100, 400, 700) # IS settings of the camera\nCSset <- list(-50, 0, 50)    # CS settings of the camera\nEVset <- list(-2, 0, 2)      # EV settings of the camera\n\n\n###------------------------------------- Converts variables -----------------------------------\n### Converting variables into usefull stuff \n\nm <- list(ISset, CSset, EVset) # makes matrix of settings\n\n\n###------------------------------------- loading csv ----------------------------------\nheisenberg <- read.csv(file=\"LAIPiFinal.csv\",head=TRUE,sep=\",\") # Read CSV file into memory\n\n###------------------------------------- COnverts commas into dots  ------------------------------\nheisenberg <- cbind(heisenberg, Miller_new = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", heisenberg$Miller)))) ### COnverts commas into dots\nheisenberg <- cbind(heisenberg, LAI2000_new = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", heisenberg$LAI2000)))) ### COnverts commas into dots\nheisenberg <- cbind(heisenberg, Lang_new = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", heisenberg$Lang)))) ### COnverts commas into dots\nheisenberg <- cbind(heisenberg, N...C_new = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", heisenberg$N...C.)))) ### COnverts commas into dots\nheisenberg <- cbind(heisenberg, T....al_new = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", heisenberg$T....al)))) ### COnverts commas into dots\n\n\n\n\n###------------------------------------- load benchmark Scripts ----------------------------------\n# benchmark <- read.csv(file=\"LAIPiBenchmark.csv\",head=TRUE,sep=\",\") # Read CSV file into memory\n# for(linesincorrection in 1:length(correction)){ #Number that cycles throug different settings 1-4\n#   subset_temp <- subset(benchmark, corrections == levels(benchmark$corrections)[1])\n#   filename <- paste(as.character(\"benchmarkset\"), as.character(as.character(\"1\")), sep = \"\")\n#   path <- \"./Results/\"\n#   savelocation <- as.character(paste(as.character(path), as.character(filename), sep = \"\"))\n#   write.csv(subset_temp, file = savelocation , quote = TRUE, eol = \"\\n\", na = \"NA\", row.names = TRUE, fileEncoding = \"\")\n#   \n#   \n#   } \n\n### \n# testbatch <- head(heisenberg, n=722)\n# testbatch <- heisenberg\n# df <- cbind(testbatch, var2 = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", testbatch$Miller)))) ### COnverts commas into dots\n\n\n### Creates diffent csv's per setting.\nfor(i in 1:length(m[[1]])){\n  IS <- m[[1]][[i]]\n  for(y in 1:length(m[[2]])){\n    CV <- m[[2]][[y]]\n    for(z in 1:length(m[[3]])){\n      EV <- m[[3]][[z]]\n      temp1 <- paste(\"IS\", as.character(IS), sep = \"\")\n      temp2 <- paste(as.character(temp1),\"CV\", sep = \"\")\n      temp3 <- paste(as.character(temp2), as.character(CV), sep = \"\")\n      temp4 <- paste(as.character(temp3), as.character(\"EV\"), sep = \"\")\n      settingstring <- paste(temp4, as.character(EV), sep = \"\")\n      c <- NULL\n      for(lines1 in 1:nrow(heisenberg)){\n        if(grepl(settingstring, heisenberg$picture.files[lines1])){\n          b <- heisenberg[lines1,]\n          c <- rbind(c,b)\n        }\n      write.csv(c, file = as.character(settingstring), quote = TRUE,\n                    eol = \"\\n\", na = \"NA\", row.names = TRUE,\n                    fileEncoding = \"\")\n        \n      }}}}\n\n\n\n# settingstring <- \"IS100CV0EV-2\"\n# dd<-data.frame(\n#   saldt=seq(as.Date(\"1999-01-01\"), as.Date(\"2014-01-10\"), by=\"6 mon\"),\n#   salpr = heisenberg$th.hold)\n\n## Create diffent csv's per setting with different corrections.\nfor(i in 1:length(m[[1]])){\n  IS <- m[[1]][[i]]\n  for(y in 1:length(m[[2]])){\n    CV <- m[[2]][[y]]\n    for(z in 1:length(m[[3]])){\n      EV <- m[[3]][[z]]\n      temp1 <- paste(\"IS\", as.character(IS), sep = \"\")\n      temp2 <- paste(as.character(temp1),\"CV\", sep = \"\")\n      temp3 <- paste(as.character(temp2), as.character(CV), sep = \"\")\n      temp4 <- paste(as.character(temp3), as.character(\"EV\"), sep = \"\")\n      settingstring <- paste(temp4, as.character(EV), sep = \"\")\n      csv_without_corrections <- read.csv(file=as.character(settingstring),head=TRUE,sep=\",\") # Read CSV file into memory\n      correction <- levels(csv_without_corrections$corrections)\n      \n      for(linesincorrection in 1:length(correction)){ #Number that cycles throug different settings 1-4\n        subset_temp <- subset(csv_without_corrections, corrections == levels(csv_without_corrections$corrections)[linesincorrection])\n        filename <- paste(as.character(settingstring), as.character(as.character(linesincorrection)), sep = \"\")\n        path <- \"./Results/\"\n        savelocation <- as.character(paste(as.character(path), as.character(filename), sep = \"\"))\n        write.csv(subset_temp, file = savelocation , quote = TRUE, eol = \"\\n\", na = \"NA\", row.names = TRUE, fileEncoding = \"\")\n      }}}}\n      \n###---------------------------- Loading all file names for plotting ----------------------------------------\nsetwd(\"E:/WUR/Thesis/R/Wurpi_R_Scripts/Thesis/results\") #sets working directory to results folder\nfilenames = dir(pattern=\"\") # Reads all file into the memory\n\n\n\n\n###------------------------- Plot timeseries ---------------------------------------------------\n\nfor (i in 1:length(filenames)) {\n  ## read strings as character\n  tmp <- read.csv(filenames[i], stringsAsFactors = FALSE)\n  ## convert to 'timeDate'\n  tmp$tfrm <- timeDate(paste(tmp$cdt, tmp$ctm),format =\"%d-%m-%Y\") #%H:%M:%S\n## create timeSeries object\nobj <- timeSeries(as.matrix(tmp$Value), tmp$tfrm)\n## store object in the list, by name\nlst[[files[i]]] <- as.xts(obj)\n}\n\nsetwd(\"E:/WUR/Thesis/R/Wurpi_R_Scripts/Thesis\") # Sets the working directory back to the orignal location\n\n\ntsdata <-NULL\ntestlocation1 <- \"./Results/benchmarkset1\"\ntestlocation2 <- \"./Results/benchmarkset2\"\ntestlocation3 <- \"./Results/benchmarkset3\"\ntestlocation4 <- \"./Results/benchmarkset4\"\ncsv_corrections1 <- read.csv(file=as.character(testlocation1),head=TRUE,sep=\",\") # Read CSV file into memory\ncsv_corrections2 <- read.csv(file=as.character(testlocation2),head=TRUE,sep=\",\") # Read CSV file into memory\ncsv_corrections3 <- read.csv(file=as.character(testlocation3),head=TRUE,sep=\",\") # Read CSV file into memory\ncsv_corrections4 <- read.csv(file=as.character(testlocation4),head=TRUE,sep=\",\") # Read CSV file into memory\ncsv_corrections1 <- cbind(csv_corrections1, var2 = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", csv_corrections1$Miller))))\nplot(csv_corrections1$var2)    \ncsv_corrections2 <- cbind(csv_corrections2, var2 = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", csv_corrections2$Miller))))\nplot(csv_corrections2$var2)  \ncsv_corrections3 <- cbind(csv_corrections3, var2 = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", csv_corrections3$Miller))))\nplot(csv_corrections3$var2)  \ncsv_corrections4 <- cbind(csv_corrections4, var2 = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", csv_corrections4$Miller))))\nplot(csv_corrections4$var2)  \n      \nplot.ts(x = csv_corrections2$Date, y = csv_corrections2$var2, type = p)      \nplot(csv_corrections2$Date, csv_corrections2$var2, type = \"p\" )       \n      #       for(lines1 in 1:nrow(csv_without_corrections)){\nplot      \ncorrectionmethod <- 0\n\n\n    \n\n\n\n\n\ncorrectionmethod <- correctionmethod +1\nline1 <- 0\nc <- NULL\nfor(lines2 in 1:nrow(csv_without_corrections)){ #number that cycles through the lines\n  line1 <- line1 + 1\n  print(\"line1\")\n  print(line1)\n  print(\"correction\")\n  print(correctionmethod)\n  name_to_filter <- levels(csv_without_corrections$corrections)[correctionmethod]\n  print(name_to_filter)\n  print(as.character(csv_without_corrections[line1, 5]))\n  if(grepl(as.character(name_to_filter), as.character(csv_without_corrections[line1, 5]))){\n    b <- csv_without_corrections[line1,]\n    c <- rbind(c,b)\n    filename <- paste(as.character(settingstring), as.character(correctionmethod), sep = \"\")\n    print(filename)\n    path <- \"./Results/\"\n    savelocation <- as.character(paste(as.character(path), as.character(filename), sep = \"\"))\n    print(\"printed\")\n    write.csv(c, file = savelocation , quote = TRUE, eol = \"\\n\", na = \"NA\", row.names = TRUE, fileEncoding = \"\")\n\n# if(grepl(name_to_filter, csv_without_corrections[line1, 5])){      \n#             name_to_filter <- correction[linesincorrection]\n#             {\n#               \n#                 print(\"start\")\n#                 print(lines2)\n#                 print(linesincorrection)\n#                 print(correction[linesincorrection])\n#                 print(\"end\")       \n#                 b <- settingswithallcorrections[lines2,]\n#                 c <- rbind(c,b)\n#                 filename <- paste(as.character(settingstring), as.character(linesincorrection), sep = \"\")\n#                 print(filename)\n#                 path <- \"./Results/\"\n#                 savelocation <- as.character(paste(as.character(path), as.character(filename), sep = \"\"))\n#               write.csv(c, file = savelocation , quote = TRUE, eol = \"\\n\", na = \"NA\", row.names = TRUE, fileEncoding = \"\")\n#               }}}\n#           \n#  \n#     }}}}}\n# \n# if(grepl(name_to_filter, csv_without_corrections$corrections[lines2])\n\ntsdata <-NULL\ntestlocation <- \"./Results/IS100CV0EV-21\"\ncsv_corrections <- read.csv(file=as.character(testlocation),head=TRUE,sep=\",\", stringsAsFactors = FALSE) # Read CSV file into memory\n# as.xts(csv_corrections)\ntsdata <- csv_corrections[,c('Date', 'var2')]#cbind(csv_corrections[3],csv_corrections[22])\ntsdata$Date <- strptime(tsdata$Date, format=\"%d-%m-%Y\")\n#tsdata$Date[1]<- as.Date(tsdata$Date[1], format=\"%m/%d/%Y\")\nclass(tsdata$var2)\nclass(tsdata$Date)\n\n\nmydate <- factor(\"1/15/2006 0:00:00\")\nmydate <- as.Date(mydate, format = \"%m/%d/%Y\")\n\n\ndata <- tsdata$Date[1]\nlibrary(lubridate)\ndate <- mdy(data)\nmydate\nclass(mydate)\n\n\ntsdata[order(tsdata$Date ),]\nsample_matrix <- data.matrix(tsdata, rownames.force = NA)\n\nplot(dff$var2)\nplot(dff$Date, dff$var2)\n\n\n        \n### plot diffent csv's per setting.\nfor(i in 1:length(m[[1]])){\n  IS <- m[[1]][[i]]\n  for(y in 1:length(m[[2]])){\n    CV <- m[[2]][[y]]\n    for(z in 1:length(m[[3]])){\n      EV <- m[[3]][[z]]\n      temp1 <- paste(\"IS\", as.character(IS), sep = \"\")\n      temp2 <- paste(as.character(temp1),\"CV\", sep = \"\")\n      temp3 <- paste(as.character(temp2), as.character(CV), sep = \"\")\n      temp4 <- paste(as.character(temp3), as.character(\"EV\"), sep = \"\")\n      settingstring <- paste(temp4, as.character(EV), sep = \"\")\n      dff <- read.csv(file=as.character(settingstring),head=TRUE,sep=\",\") # Read CSV file into memory\n      plot(dff$var2)\n      plot(dff$Date, dff$var2, main = paste(\"Settings:\", as.character(settingstring), sep = \" \"),\n           xlab=\"date\", ylab=\"LAI\") #zoo (strucchange) or xts \n    }}}\n\n\n\n# dff <- 1\nplot(dff$var2)\nplot(dff$Date, dff$var2)\n\n\n\n# with(df, plot(Date, var2))\n\nheisenberg$Lang\n\ncheckif <- sapply(heisenberg$picture.files, grepl, settingstring)\n\n# testbatch$Date <- as.Date(testbatch$Date, \"%d/%m/%Y\")\n# plot(Miller ~ Date, testbatch, xaxt = \"n\", type = \"l\")\n# axis(1, testbatc$Date, format(testbatc$Date, \"%b %d\"), cex.axis = .7) \n\n\nplot(dff$var2)\nplot(dff$Date, dff$var2, main = paste(\"Settings:\", as.character(settingstring), sep = \" \"),\n     xlab=\"date\", ylab=\"LAI\") #zoo (strucchange) or xts \n  }}}\n\n\n\n# dff <- 1\nplot(dff$var2)\nplot(dff$Date, dff$var2)\n\n# if(grepl(name_to_filter, csv_without_corrections[line1, 5])){      \n#             name_to_filter <- correction[linesincorrection]\n#             {\n#               \n#                 print(\"start\")\n#                 print(lines2)\n#                 print(linesincorrection)\n#                 print(correction[linesincorrection])\n#                 print(\"end\")       \n#                 b <- settingswithallcorrections[lines2,]\n#                 c <- rbind(c,b)\n#                 filename <- paste(as.character(settingstring), as.character(linesincorrection), sep = \"\")\n#                 print(filename)\n#                 path <- \"./Results/\"\n#                 savelocation <- as.character(paste(as.character(path), as.character(filename), sep = \"\"))\n#               write.csv(c, file = savelocation , quote = TRUE, eol = \"\\n\", na = \"NA\", row.names = TRUE, fileEncoding = \"\")\n#               }}}\n#           \n#  \n#     }}}}}\n# \n# if(grepl(name_to_filter, csv_without_corrections$corrections[lines2])\n\ntsdata <-NULL\ntestlocation <- \"./Results/IS100CV0EV-21\"\ncsv_corrections <- read.csv(file=as.character(testlocation),head=TRUE,sep=\",\", stringsAsFactors = FALSE) # Read CSV file into memory\n# as.xts(csv_corrections)\ntsdata <- csv_corrections[,c('Date', 'var2')]#cbind(csv_corrections[3],csv_corrections[22])\ntsdata$Date <- strptime(tsdata$Date, format=\"%d-%m-%Y\")\n#tsdata$Date[1]<- as.Date(tsdata$Date[1], format=\"%m/%d/%Y\")\nclass(tsdata$var2)\nclass(tsdata$Date)\n\n",
    "created" : 1449577031678.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3910528817",
    "id" : "8EB508AB",
    "lastKnownWriteTime" : 1461915181,
    "path" : "E:/WUR/Thesis/R/Wurpi_R_Scripts/Thesis/Wurpi_R_Scripts.R",
    "project_path" : "Wurpi_R_Scripts.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}